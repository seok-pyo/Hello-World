/*
정규 표현식(Regular Expression)
정규식은 문자열에서 특정 내용을 찾거나 대체 또는 발췌하는데 사용된다.

정규식 구성
/regexr(패턴)/i(플래그)

// 리터럴 방식
const regex = /abc/;

// 생성자 방식
const regex_ = new RegExp("abc");
const regex__ = new RegExp(/abc/);

정규식 메서드
("문자열").match(/정규식/플래그) : 문자열에서 정규표현식에 매칭되는 항목들을 배열로 반환
("문자열").replace(/정규식/"대체문자열") : 정규표현식에 매칭되는 항목을 대체문자열로 반환(기존 변수는 유지)
("문자열").split(정규표현식) : 문자열을 정규표현식에 매칭되는 항목으로 쪼개어 배열로 반환
(정규표현식).test("문자열") : 문자열이 정규표현식과 매칭되면 true, 아니면 false
(정규표현식).exec("문자열") : match 메서도와 유사(단, 첫번째 매칭 결과만 반환)

정규식 플래그
정규식 플래그는 정규식을 생성할 때 고급 검색을 위한 전역 옵션을 설정할 수 있도록 지원하는 기능
i : ignore case : 대소문자를 구별하지 않고 검색한다.
g : global : 문자열 내의 모든 패턴을 검색한다.
m : multi line : 문자열의 행이 바뀌더라도 검색을 계속한다.
s : 모든 문자 정규식이 개행 문자 \n도 포함하도록
u : 유니코드 전체를 지원
y : 문자 내 특정 위치에서 검색을 진행하는 'sticky' 모드를 활성화

정규식 특정 문자 숫자 매칭 패턴
a-zA-Z : 영어알파벳(-으로 범위 지정)
ㄱ-ㅎ가-힣 : 한글 문자(-으로 범위 지정)
0-9 : 숫자(-으로 범위 지정)
. : 모든 문자열(숫자, 한글, 영어, 특수문자, 공백 모두) * 단 줄바꿈 미포함
\d : 숫자
\D : 숫자가 아닌 것
\w : 밑줄 문자를 포함한 영어(대,소) 숫자에 대응 [A-Za-z0-9_] 와 동일
\W : \w가 아닌 것
\s : space 공백
\S : 공백이 아닌 것
\특수기호 : 특수기호
\b : 63개 문자(영문 대소문 + 숫자 10 + _ )아닌 나머지 문자에 일치하는 경계
\B : 63개 문자에 일치하는 경계
\x : 16진수 문자에 일치 /\x61/ 는 'a'에 일치
\0 : 8진수 문자에 일치 /\0141/ 은 'a'에 일치
\u : 유니코드 문자에 일치 /\u0061/은 'a'에 일치
\c : 제어 문자에 일치
\f : 폼 피드 문자에 일치
\n : 줄 바꿈 문자에 일치
\r : 캐리지 리턴 문자에 일치
\t : 탭 문자에 일치

정규식 검색 기준 패턴
| : or : a|b
[] : 괄호안의 문자들 중 하나, or 처리 묶음 : /[다-라]/ /[abc]/
[^문자] : 괄호안의 문자를 제외한 것
^문자열 : 특정 문자열로 시작(시작점)
문자열$ : 특정 문자열로 끝남(종착점)

정규식 갯수 반복 패턴
? : 없거나, 최대 한개만 : /apple?/
* : 없거나 or 있거나(여러개) : /apple*/ /*
+ : 최소 한개, 여러개 : /apple+/
*? : {0} 와 동일
+? : {1} 과 동일
{n} : n개
{Min,} : 최소 Min개 이상
{Min, Max} : 최소 Min개 이상, 최대 Max개 이하 {3,5}? == {3} ?표현식이 최소한으로 반복하게 만든다(non-greedy)

정규식 그룹 패턴
() : 그룹화 및 캡쳐
(?:패턴) : 그룹화 (갭쳐 X)
(?=) : 앞쪽 일치 : /ab(?=c)/
(?!) : 부정 앞쪽 일치 : /ab(?!c)/
(?<=) : 뒤쪽 일치 : /(?<=ab)c/
(?<!) : 부정 뒤쪽 일치 : /(?<!ab)c/


https://regexr.com/
*/

const babbling = ["ma"];

function solution(babbling) {
  var answer = 0;
  const regex = /^(aya|ye|woo|ma)$+/;

  babbling.forEach((word) => {
    if (regex.test(word)) answer++;
  });

  console.log(answer);
}

solution(babbling);
